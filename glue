#!/usr/bin/env python3
# Finetuning the library models for MRPC on GLUE
# Copyright (C) 2018  The Google AI Language Team Authors
# Copyright (C) 2018  The HuggingFace Inc. team
# Copyright (C) 2018  NVIDIA CORPORATION
# Copyright (C) 2019  Nguyá»…n Gia Phong
#
# This file is part of viwikipi.
#
# viwikipi is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# viwikipi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with viwikipi.  If not, see <https://www.gnu.org/licenses/>.

import os
from argparse import ArgumentParser
from glob import glob
from itertools import chain

import numpy as np
import torch
from loguru import logger
from torch.utils.data import (DataLoader, RandomSampler, SequentialSampler,
                              TensorDataset)
from torch.utils.data.distributed import DistributedSampler
try:
    from torch.utils.tensorboard import SummaryWriter
except ImportError:
    from tensorboardX import SummaryWriter
from tqdm import tqdm, trange

from transformers import (
    WEIGHTS_NAME, AdamW, WarmupLinearSchedule,
    BertConfig, BertForSequenceClassification, BertTokenizer,
    RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer,
    XLMConfig, XLMForSequenceClassification, XLMTokenizer,
    XLNetConfig, XLNetForSequenceClassification, XLNetTokenizer,
    DistilBertConfig, DistilBertForSequenceClassification, DistilBertTokenizer)
from transformers import glue_compute_metrics as compute_metrics
from transformers import glue_output_modes as output_modes
from transformers import glue_processors as processors
from transformers import glue_convert_examples_to_features as examples2features

ALL_MODELS = tuple(chain.from_iterable(
    conf.pretrained_config_archive_map.keys()
    for conf in (BertConfig, XLNetConfig, XLMConfig,
                 RobertaConfig, DistilBertConfig)))
MODEL_CLASSES = {
    'bert': (BertConfig, BertForSequenceClassification, BertTokenizer),
    'xlnet': (XLNetConfig, XLNetForSequenceClassification, XLNetTokenizer),
    'xlm': (XLMConfig, XLMForSequenceClassification, XLMTokenizer),
    'roberta': (RobertaConfig, RobertaForSequenceClassification,
                RobertaTokenizer),
    'distilbert': (DistilBertConfig, DistilBertForSequenceClassification,
                   DistilBertTokenizer)}


def set_seed(args):
    """Set seed for reproduciblity."""
    np.random.seed(args.seed)
    torch.manual_seed(args.seed)
    if args.n_gpu > 0: torch.cuda.manual_seed_all(args.seed)


def train(args, train_dataset, model, tokenizer, step_optim):
    """Train the model."""
    if args.local_rank in [-1, 0]:
        tb_writer = SummaryWriter()

    args.train_batch_size = args.per_gpu_train_batch_size * max(1, args.n_gpu)
    if args.local_rank == -1:
        train_sampler = RandomSampler(train_dataset)
    else:
        train_sampler = DistributedSampler(train_dataset)
    train_dataloader = DataLoader(train_dataset, sampler=train_sampler,
                                  batch_size=args.train_batch_size)
    data_steps = len(train_dataloader) // args.gradient_accumulation_steps

    if args.max_steps > 0:
        t_total = args.max_steps
        args.num_train_epochs = args.max_steps//data_steps + 1
    else:
        t_total = args.num_train_epochs * data_steps
    if not args.logging_steps: args.logging_steps = data_steps
    if not args.save_steps: args.save_steps = data_steps

    # Prepare optimizer and schedule (linear warmup and decay)
    no_decay = {'bias', 'LayerNorm.weight'}
    optimizer_grouped_parameters = [
        {'params': [p for n, p in model.named_parameters()
                    if not no_decay.intersection(n)],
         'weight_decay': args.weight_decay},
        {'params': [p for n, p in model.named_parameters()
                    if no_decay.intersection(n)],
         'weight_decay': 0.0}]
    optimizer = AdamW(optimizer_grouped_parameters,
                      lr=args.learning_rate, eps=args.adam_epsilon)
    scheduler = WarmupLinearSchedule(optimizer, warmup_steps=args.warmup_steps,
                                     t_total=t_total)

    # multi-gpu training
    if args.n_gpu > 1: model = torch.nn.DataParallel(model)
    # Distributed training
    if args.local_rank != -1:
        model = torch.nn.parallel.DistributedDataParallel(
            model, device_ids=[args.local_rank], output_device=args.local_rank,
            find_unused_parameters=True)

    # Train!
    logger.info('***** Running training *****')
    logger.info(f'Num examples = {len(train_dataset)}')
    logger.info(f'Num Epochs = {args.num_train_epochs}')
    logger.info('Instantaneous batch size per GPU = {}',
                args.per_gpu_train_batch_size)
    logger.info(
        '  Total train batch size (parallel, distributed & accumulation) = {}',
        (args.train_batch_size * args.gradient_accumulation_steps
         * (torch.distributed.get_world_size() if args.local_rank+1 else 1)))
    logger.info(
        f'Gradient Accumulation steps = {args.gradient_accumulation_steps}')
    logger.info(f'Total optimization steps = {t_total}')

    global_step = 0
    tr_loss, logging_loss = 0.0, 0.0
    model.zero_grad()
    train_iterator = trange(int(args.num_train_epochs), desc='Epoch',
                            disable=args.local_rank not in [-1, 0])
    set_seed(args)
    for _ in train_iterator:
        epoch_iterator = tqdm(train_dataloader, desc='Iteration',
                              disable=args.local_rank not in [-1, 0])
        for step, batch in enumerate(epoch_iterator):
            model.train()
            batch = tuple(t.to(args.device) for t in batch)
            inputs = {'input_ids': batch[0], 'attention_mask': batch[1],
                      'labels': batch[3]}
            if args.model_type in ['bert', 'xlnet']:
                inputs['token_type_ids'] = batch[2]
            outputs = model(**inputs)
            # Model outputs are always tuple in transformers (see doc).
            loss = outputs[0]

            # mean() to average on multi-gpu parallel training
            if args.n_gpu > 1: loss = loss.mean()
            if args.gradient_accumulation_steps > 1:
                loss = loss / args.gradient_accumulation_steps

            loss.backward()

            tr_loss += loss.item()
            if (step + 1) % args.gradient_accumulation_steps == 0:
                parameters = model.parameters()
                torch.nn.utils.clip_grad_norm_(parameters, args.max_grad_norm)

                step_optim(optimizer)
                scheduler.step()  # Update learning rate schedule
                model.zero_grad()
                global_step += 1

                if (args.local_rank in [-1, 0] and args.logging_steps > 0
                    and global_step % args.logging_steps == 0):
                    # Log metrics
                    # Only evaluate when single GPU for better metrics average
                    if args.local_rank == -1 and args.eval_while_train:
                        prefix = f'no{global_step // args.logging_steps}'
                        results = evaluate(args, model, tokenizer, prefix)
                        for key, value in results.items():
                            tb_writer.add_scalar(
                                f'eval_{key}', value, global_step)
                    tb_writer.add_scalar(
                        'lr', scheduler.get_lr()[0], global_step)
                    tb_writer.add_scalar(
                        'loss', (tr_loss - logging_loss)/args.logging_steps,
                        global_step)
                    logging_loss = tr_loss

                if (args.local_rank in [-1, 0] and args.save_steps > 0
                    and global_step % args.save_steps == 0):
                    # Save model checkpoint
                    output_dir = os.path.join(
                        args.output_dir, f'checkpoint-{global_step}')
                    if not os.path.exists(output_dir):
                        os.makedirs(output_dir)
                    # Take care of distributed/parallel training
                    model_to_save = getattr(model, 'module', model)
                    model_to_save.save_pretrained(output_dir)
                    torch.save(args, os.path.join(output_dir,
                                                  'training_args.bin'))
                    logger.info(f'Saving model checkpoint to {output_dir}')

            if args.max_steps > 0 and global_step > args.max_steps:
                epoch_iterator.close()
                break
        if args.max_steps > 0 and global_step > args.max_steps:
            train_iterator.close()
            break

    if args.local_rank in [-1, 0]:
        tb_writer.close()

    return global_step, tr_loss / global_step


def evaluate(args, model, tokenizer, prefix):
    """Evaluate the dev set."""
    # Loop to handle MNLI double evaluation (matched, mis-matched)
    if args.task == 'mnli':
        eval_task_names = 'mnli', 'mnli-mm'
        eval_outputs_dirs = args.output_dir, f'{args.output_dir}-MM'
    else:
        eval_task_names = args.task,
        eval_outputs_dirs = args.output_dir,

    results = {}
    for eval_task, eval_output_dir in zip(eval_task_names, eval_outputs_dirs):
        eval_dataset = load_and_cache_examples(
            args, eval_task, tokenizer, evaluate=True)

        if not os.path.exists(eval_output_dir) and args.local_rank in [-1, 0]:
            os.makedirs(eval_output_dir)

        args.eval_batch_size = args.per_gpu_eval_batch_size*max(1, args.n_gpu)
        # Note that DistributedSampler samples randomly
        if args.local_rank == -1:
            eval_sampler = SequentialSampler(eval_dataset)
        else:
            eval_sampler = DistributedSampler(eval_dataset)
        eval_dataloader = DataLoader(eval_dataset, sampler=eval_sampler,
                                     batch_size=args.eval_batch_size)

        # Eval!
        logger.info(f'***** Running evaluation {prefix} *****')
        logger.info(f'Num examples = {len(eval_dataset)}')
        logger.info(f'Batch size = {args.eval_batch_size}')
        eval_loss = 0.0
        nb_eval_steps = 0
        preds = None
        out_label_ids = None
        for batch in tqdm(eval_dataloader, desc='Evaluating'):
            model.eval()
            batch = tuple(t.to(args.device) for t in batch)

            with torch.no_grad():
                inputs = {'input_ids': batch[0], 'attention_mask': batch[1],
                          'labels': batch[3]}
                if args.model_type in ['bert', 'xlnet']:
                    inputs['token_type_ids'] = batch[2]
                outputs = model(**inputs)
                tmp_eval_loss, logits = outputs[:2]

                eval_loss += tmp_eval_loss.mean().item()
            nb_eval_steps += 1
            if preds is None:
                preds = logits.detach().cpu().numpy()
                out_label_ids = inputs['labels'].detach().cpu().numpy()
            else:
                preds = np.append(preds, logits.detach().cpu().numpy(), axis=0)
                out_label_ids = np.append(
                    out_label_ids, inputs['labels'].detach().cpu().numpy(),
                    axis=0)

        eval_loss = eval_loss / nb_eval_steps
        if args.output_mode == 'classification':
            preds = np.argmax(preds, axis=1)
        elif args.output_mode == 'regression':
            preds = np.squeeze(preds)
        result = compute_metrics(eval_task, preds, out_label_ids)
        results.update(result)

        eval_dir = os.path.join(eval_output_dir, prefix)
        if not os.path.exists(eval_dir): os.makedirs(eval_dir)
        output_eval_file = os.path.join(eval_dir, 'eval_results.txt')
        with open(output_eval_file, 'w') as writer:
            logger.debug(f'***** Eval results {prefix} *****')
            for key in sorted(result.keys()):
                logger.debug(f'{key} = {result[key]}')
                writer.write(f'{key} = {result[key]}\n')
    return results


def load_and_cache_examples(args, task, tokenizer, evaluate=False):
    """Load and cache examples."""
    # Make sure only the first process in distributed training
    # processes the dataset, and the others will use the cache
    if args.local_rank not in [-1, 0] and not evaluate:
        torch.distributed.barrier()

    processor = processors[task]()
    output_mode = output_modes[task]
    # Load data features from cache or dataset file
    cached_features_file = os.path.join(
        args.data_dir, 'cached_{}_{}_{}_{}'.format(
            'dev' if evaluate else 'train',
            os.path.basename(args.model.rstrip('/')),
            args.max_seq, task))
    if os.path.exists(cached_features_file) and not args.overwrite_cache:
        logger.info(f'Loading features from cache {cached_features_file}')
        features = torch.load(cached_features_file)
    else:
        logger.info(f'Creating features from dataset file at {args.data_dir}')
        label_list = processor.get_labels()
        if task in ['mnli', 'mnli-mm'] and args.model_type in ['roberta']:
            # HACK(label indices are swapped in RoBERTa pretrained model)
            label_list[1:3] = label_list[2:0:-1]
        if evaluate:
            examples = processor.get_dev_examples(args.data_dir)
        else:
            examples = processor.get_train_examples(args.data_dir)
        input_ids = tokenizer.convert_tokens_to_ids([tokenizer.pad_token])
        features = examples2features(
            examples, tokenizer,
            label_list=label_list,
            max_length=args.max_seq,
            output_mode=output_mode,
            # pad on the left for xlnet
            pad_on_left=bool(args.model_type in ['xlnet']),
            pad_token=input_ids[0],
            pad_token_segment_id=(4 if args.model_type in ['xlnet'] else 0))
        if args.local_rank in [-1, 0]:
            logger.info(f'Saving features into cache {cached_features_file}')
            torch.save(features, cached_features_file)

    # Make sure only the first process in distributed training
    # processes the dataset, and the others will use the cache
    if args.local_rank == 0 and not evaluate: torch.distributed.barrier()

    # Convert to Tensors and build dataset
    all_input_ids = torch.tensor([f.input_ids for f in features],
                                 dtype=torch.long)
    all_attention_mask = torch.tensor([f.attention_mask for f in features],
                                      dtype=torch.long)
    all_token_type_ids = torch.tensor([f.token_type_ids for f in features],
                                      dtype=torch.long)
    labels = [f.label for f in features]
    if output_mode == 'classification':
        all_labels = torch.tensor(labels, dtype=torch.long)
    elif output_mode == 'regression':
        all_labels = torch.tensor(labels, dtype=torch.float)

    dataset = TensorDataset(all_input_ids, all_attention_mask,
                            all_token_type_ids, all_labels)
    return dataset


if __name__ == '__main__':
    parser = ArgumentParser()
    # Required parameters
    parser.add_argument('--model-type', required=True,
                        choices=MODEL_CLASSES.keys(), help='model type')
    parser.add_argument(
        '--model', required=True, metavar='PATH_OR_NAME',
        help=f'path to or name of pre-trained model ({", ".join(ALL_MODELS)})')
    parser.add_argument('--task', choices=processors.keys(), default='mrpc',
                        help='name of the task to train')
    parser.add_argument('--data-dir', default='mrpc', metavar='DIR',
                        help='directory containing data (e.g. TSVs)')
    parser.add_argument('--output-dir', required=True, metavar='DIR',
                        help='storage for  model predictions and checkpoints')

    # Other parameters
    parser.add_argument(
        '--config', metavar='PATH_OR_NAME',
        help='pretrained config name or path (fallback to model)')
    parser.add_argument(
        '--tokenizer', metavar='PATH_OR_NAME',
        help='pretrained tokenizer name or path (fallback to model)')
    parser.add_argument('--cache-dir', metavar='DIR',
                        help='storage of pre-trained models from Amazon S3')
    parser.add_argument('--max-seq', metavar='LENGTH', default=128, type=int,
                        help=('maximum input length after tokenization. '
                              'Sequences longer than this will be truncated, '
                              'sequences shorter will be padded.'))
    parser.add_argument('--no-train', action='store_false', default=True,
                        dest='train', help='do not train')
    parser.add_argument('--no-eval', action='store_false', default=True,
                        dest='eval', help='do not evaluate the dev set')
    parser.add_argument(
        '--no-eval-while-train', action='store_false',
        default=True, dest='eval_while_train',
        help='do not evaluate at each logging step of training')
    parser.add_argument('--lower-case', action='store_true',
                        help='for uncased models')
    parser.add_argument(
        '--per-gpu-train-batch-size', metavar='SIZE', default=32, type=int,
        help='batch size per GPU/CPU for training')
    parser.add_argument(
        '--per-gpu-eval-batch-size', metavar='SIZE', default=8, type=int,
        help='batch size per GPU/CPU for evaluation')
    parser.add_argument(
        '--gradient-accumulation-steps', metavar='N', default=1, type=int,
        help=('number of updates steps to accumulate '
              'before performing a backward/update pass'))
    parser.add_argument('--learning-rate', metavar='RATE', default=5e-5,
                        type=float, help='the initial learning rate for Adam')
    parser.add_argument('--weight-decay', metavar='W', default=0.0,
                        type=float, help='weight decay if we apply some')
    parser.add_argument('--adam-epsilon', metavar='E', default=1e-8,
                        type=float, help='epsilon for Adam optimizer')
    parser.add_argument('--max-grad-norm', metavar='X', default=1.0,
                        type=float, help='max gradient norm')
    parser.add_argument('--num-train-epochs', metavar='X', default=3.0,
                        type=float, help='number of epochs to train')
    parser.add_argument(
        '--max-steps', metavar='N', default=-1, type=int,
        help='number of training steps (override num-train-epochs)')
    parser.add_argument('--warmup-steps', metavar='N', default=0, type=int,
                        help='number of linear warmup steps')

    parser.add_argument('--log-file', metavar='PATH', help='path to log file')
    parser.add_argument('--logging-steps', metavar='N', type=int,
                        help=('log every N updates steps'
                              '(0 to log every epoch, negative to disable)'))
    parser.add_argument('--save-steps', metavar='N', default=-1, type=int,
                        help=('save checkpoint every N updates steps'
                              '(0 to save every epoch, negative to disable)'))
    parser.add_argument('--eval-all-checkpoints', action='store_true',
                        help=('evaluate all checkpoints prefixed by model '
                              'and postfixed by a step number'))
    parser.add_argument('--no-cuda', action='store_false', default=True,
                        dest='cuda', help='avoid using CUDA when available')
    parser.add_argument(
        '--no-overwrite-output-dir', action='store_false',
        default=True, dest='overwrite_output_dir',
        help='do not overwrite the content of the output directory')
    parser.add_argument(
        '--no-overwrite-cache', action='store_false',
        default=True, dest='overwrite_cache',
        help='do not overwrite the cached training and evaluation sets')
    parser.add_argument('--seed', default=42, type=int,
                        help='random seed for initialization')

    parser.add_argument('--local-rank', metavar='RANK', type=int, default=-1,
                        help='local rank for distributed training')
    parser.add_argument('--server-ip', metavar='HOST',
                        help='for distant debugging')
    parser.add_argument('--server-port', metavar='PORT', type=int,
                        help='for distant debugging')
    args = parser.parse_args()

    if (args.train and not args.overwrite_output_dir
        and os.path.exists(args.output_dir) and os.listdir(args.output_dir)):
        raise ValueError(
            f'Output directory ({args.output_dir}) already exists '
            'and is not empty. Use --overwrite-output-dir to overcome.')

    # Setup distant debugging if needed
    if args.server_ip and args.server_port:
        # Visual Studio distant debugging
        import ptvsd
        print('Waiting for debugger attach')
        ptvsd.enable_attach(address=(args.server_ip, args.server_port),
                            redirect_output=True)
        ptvsd.wait_for_attach()

    # Setup CUDA, GPU & distributed training
    step_optim = lambda optimizer: optimizer.step()
    if 'COLAB_TPU_ADDR' in os.environ:
        from torch_xla.core import xla_model as xm
        args.device = xm.xla_device()
        args.n_gpu = torch.cuda.device_count()
        step_optim = lambda optim: xm.optimizer_step(optim, barrier=True)
    elif args.local_rank == -1 or not args.cuda:
        dev = 'cuda' if torch.cuda.is_available() and args.cuda else 'cpu'
        args.device = torch.device(dev)
        args.n_gpu = torch.cuda.device_count()
    else:
        # Initialize the distributed backend
        # which will take care of sychronizing nodes/GPUs
        torch.cuda.set_device(args.local_rank)
        args.device = torch.device('cuda', args.local_rank)
        torch.distributed.init_process_group(backend='nccl')
        args.n_gpu = 1

    # Setup logging
    if args.log_file is not None: logger.add(args.log_file)
    logger.debug((f'Process rank: {args.local_rank}, '
                  f'device: {args.device}, '
                  f'n_gpu: {args.n_gpu}, '
                  f'distributed training: {bool(args.local_rank+1)}'))

    # Set seed
    set_seed(args)

    # Prepare GLUE task
    processor = processors[args.task]()
    args.output_mode = output_modes[args.task]
    label_list = processor.get_labels()
    num_labels = len(label_list)

    # Make sure only the first process in distributed training
    # will download model & vocab
    if args.local_rank not in [-1, 0]: torch.distributed.barrier()

    # Load pretrained model and tokenizer
    config_class, model_class, tokenizer_class = MODEL_CLASSES[args.model_type]
    config = config_class.from_pretrained(
        args.config or args.model, num_labels=num_labels,
        finetuning_task=args.task, cache_dir=args.cache_dir)
    tokenizer = tokenizer_class.from_pretrained(
        args.tokenizer or args.model, do_lower_case=args.lower_case,
        cache_dir=args.cache_dir)
    model = model_class.from_pretrained(
        args.model, from_tf=('.ckpt' in args.model),
        config=config, cache_dir=args.cache_dir)

    # Make sure only the first process in distributed training
    # will download model & vocab
    if args.local_rank == 0: torch.distributed.barrier()

    model.to(args.device)
    logger.debug(f'Training/evaluation parameters {args}')

    # Training
    if args.train:
        train_dataset = load_and_cache_examples(args, args.task,
                                                tokenizer, evaluate=False)
        global_step, tr_loss = train(args, train_dataset,
                                     model, tokenizer, step_optim)
        logger.debug(f'global_step = {global_step}, average loss = {tr_loss}')

    # Saving best-practices: if you use defaults names for the model,
    # you can reload it using from_pretrained()
    if ((args.local_rank == -1 or torch.distributed.get_rank() == 0)
        and args.train):
        # Create output directory if needed
        if not os.path.exists(args.output_dir) and args.local_rank in [-1, 0]:
            os.makedirs(args.output_dir)

        logger.info(f'Saving model checkpoint to {args.output_dir}')
        # Take care of distributed/parallel training
        model_to_save = getattr(model, 'module', model)
        # Save a trained model, configuration and tokenizer
        # using save_pretrained, which can be reloaded using from_pretrained
        model_to_save.save_pretrained(args.output_dir)
        tokenizer.save_pretrained(args.output_dir)

        # Good practice: save your training arguments
        # together with the trained model
        torch.save(args, os.path.join(args.output_dir, 'training_args.bin'))

        # Load a trained model and vocabulary that you have fine-tuned
        model = model_class.from_pretrained(args.output_dir)
        tokenizer = tokenizer_class.from_pretrained(args.output_dir)
        model.to(args.device)

    # Evaluation
    results = {}
    if args.eval and args.local_rank in [-1, 0]:
        tokenizer = tokenizer_class.from_pretrained(
            args.output_dir, do_lower_case=args.lower_case)
        checkpoints = [args.output_dir]
        if args.eval_all_checkpoints:
            pathpattern = f'{args.output_dir}/**/{WEIGHTS_NAME}'
            checkpoints = [os.path.dirname(c)
                           for c in sorted(glob(pathpattern, recursive=True))]
        logger.info(f'Evaluate the following checkpoints: {checkpoints}')
        for checkpoint in checkpoints:
            global_step, prefix = '_', ''
            if len(checkpoints) > 1: global_step += checkpoint.split('-')[-1]
            if checkpoint.find('checkpoint') != -1:
                prefix = checkpoint.split('/')[-1]

            model = model_class.from_pretrained(checkpoint)
            model.to(args.device)
            result = evaluate(args, model, tokenizer, prefix)
            result = {k+global_step: v for k, v in result.items()}
            results.update(result)
